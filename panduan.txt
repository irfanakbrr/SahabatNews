Tentu, saya akan buatkan panduan super detail untuk mengintegrasikan Gemini 2.0 Flash text-to-image ke dalam platform berita Laravel Anda. Panduan ini akan mencakup segalanya, mulai dari backend, database, hingga frontend dengan JavaScript untuk pengalaman pengguna yang dinamis.

Peringatan Keamanan yang Sangat Penting!

API Key yang Anda berikan (AIzaSyB...) adalah rahasia. Jangan pernah menaruhnya secara langsung di dalam kode yang bisa dilihat publik (seperti JavaScript di browser) atau di dalam repositori Git. Saya akan menunjukkan cara yang benar dan aman untuk menyimpannya menggunakan file .env di Laravel. Anggap API Key Anda seperti password.

Gambaran Umum Arsitektur

Kita akan membangun sistem dengan alur kerja sebagai berikut:

Halaman Pembuatan Berita: Admin/penulis melihat form untuk menulis berita.

Opsi Gambar Sampul: Akan ada dua pilihan:

Upload Manual: Input file seperti biasa.

Generate dengan AI: Sebuah text input untuk "prompt" dan tombol "Generate Image".

Proses AI Generation:

Ketika tombol "Generate Image" diklik, JavaScript akan mengirimkan permintaan (AJAX) ke backend Laravel Anda.

Controller Laravel akan memanggil sebuah "Service" khusus yang berinteraksi dengan Gemini API.

Gemini akan mengembalikan gambar dalam format base64.

Service kita akan mengubah base64 menjadi file gambar (.png) dan menyimpannya di server (storage/app/public/covers).

Backend akan mengembalikan URL gambar yang baru dibuat ke frontend.

Tampilan Frontend: JavaScript akan menampilkan preview gambar hasil generate AI. Sebuah hidden input akan diisi dengan path file gambar tersebut dan penanda bahwa gambar ini dari AI.

Penyimpanan Berita: Saat form berita disubmit, path gambar dan status "AI-generated" akan disimpan ke database bersama dengan artikelnya.

Tampilan Berita: Saat berita ditampilkan, jika ditandai sebagai "AI-generated", keterangan "Gambar dibuat oleh AI" akan muncul di bawah gambar sampul.

Langkah 1: Pengaturan Backend Laravel
1.1. Instalasi Library PHP untuk Gemini

Google tidak menyediakan library PHP resmi khusus untuk Gemini API (seperti di Node.js), tetapi ada library komunitas yang sangat bagus dan aktif. Kita akan menggunakan google-gemini-php/client.

Buka terminal di direktori proyek Laravel Anda dan jalankan:

composer require google-gemini-php/client

1.2. Konfigurasi API Key (Cara Aman)

Buka file .env di root proyek Laravel Anda.

Tambahkan baris berikut di bagian akhir file. Ganti AIzaSy... dengan API Key Anda yang asli.

GEMINI_API_KEY=AIzaSyBnGRmoce6EGq1LkLIXFhhSQHonK4dQUAc
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Dotenv
IGNORE_WHEN_COPYING_END

Agar Laravel mengenali variabel ini, terkadang perlu membersihkan cache config.

php artisan config:cache
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END
1.3. Membuat Service untuk Logika Gemini

Membuat "Service" adalah praktik terbaik untuk memisahkan logika bisnis (seperti menghubungi API eksternal) dari Controller.

Buat direktori baru: app/Services.

Buat file baru di dalamnya: app/Services/GeminiImageService.php.

Isi file tersebut dengan kode berikut. Kode ini adalah "terjemahan" dari logika Node.js Anda ke dalam PHP.

<?php

namespace App\Services;

use Gemini\Laravel\Facades\Gemini;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class GeminiImageService
{
    /**
     * Menghasilkan gambar dari prompt teks menggunakan Gemini 2.0 Flash
     * dan menyimpannya ke storage.
     *
     * @param string $prompt
     * @return string|null Path file yang disimpan, atau null jika gagal.
     */
    public function generateImageFromPrompt(string $prompt): ?string
    {
        try {
            // Nama model harus sesuai dengan dokumentasi Gemini untuk image generation
            $model = 'gemini-2.0-flash-preview-image-generation';

            // Melakukan panggilan ke Gemini API
            $response = Gemini::geminiPro()
                ->withModel($model)
                // Config ini krusial, sama seperti `responseModalities` di Node.js
                ->withResponseMimeType('image/png')
                ->generateContent($prompt);

            // Gemini PHP client ini sudah pintar, jika mimetype diset,
            // dia akan langsung memberikan akses ke data base64.
            $base64Data = $response->images()[0]->data;

            // Decode data base64 menjadi data biner gambar
            $imageData = base64_decode($base64Data);

            // Buat nama file yang unik
            $filename = 'covers/' . Str::uuid() . '.png';

            // Simpan gambar ke disk 'public'
            // Pastikan Anda sudah menjalankan `php artisan storage:link`
            Storage::disk('public')->put($filename, $imageData);

            // Kembalikan path file yang bisa diakses publik
            return $filename;

        } catch (\Exception $e) {
            // Catat error untuk debugging
            Log::error('Gemini API Error: ' . $e->getMessage());
            return null; // Kembalikan null jika terjadi error
        }
    }
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
PHP
IGNORE_WHEN_COPYING_END
1.4. Membuat Controller dan Route

Controller akan menerima permintaan dari frontend dan menggunakan GeminiImageService.

Jalankan perintah ini untuk membuat controller baru:

php artisan make:controller ImageGenerationController
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END

Buka file app/Http/Controllers/ImageGenerationController.php dan isi dengan kode ini:

<?php

namespace App\Http\Controllers;

use App\Services\GeminiImageService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class ImageGenerationController extends Controller
{
    protected $geminiService;

    public function __construct(GeminiImageService $geminiService)
    {
        $this->geminiService = $geminiService;
    }

    /**
     * Handle permintaan untuk generate gambar AI.
     */
    public function generate(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'prompt' => 'required|string|max:1000',
        ]);

        if ($validator->fails()) {
            return response()->json(['error' => $validator->errors()->first()], 422);
        }

        $prompt = $request->input('prompt');
        $imagePath = $this->geminiService->generateImageFromPrompt($prompt);

        if ($imagePath) {
            return response()->json([
                'success' => true,
                // Kita gunakan asset() untuk mendapatkan URL lengkap
                'url' => asset('storage/' . $imagePath),
                'path' => $imagePath, // Path ini untuk disimpan di database
            ]);
        }

        return response()->json([
            'success' => false,
            'error' => 'Gagal membuat gambar. Silakan coba lagi atau hubungi administrator.'
        ], 500);
    }
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
PHP
IGNORE_WHEN_COPYING_END

Sekarang, daftarkan route untuk controller ini. Buka routes/web.php dan tambahkan baris berikut:

use App\Http\Controllers\ImageGenerationController;

// ... (route lain)

Route::post('/generate-image', [ImageGenerationController::class, 'generate'])->name('image.generate');
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
PHP
IGNORE_WHEN_COPYING_END
Langkah 2: Persiapan Database dan Model

Kita perlu memodifikasi tabel articles (atau tabel berita Anda) untuk menyimpan informasi gambar.

2.1. Membuat Migrasi

Asumsikan Anda sudah punya tabel articles. Kita akan menambahkan kolom cover_image_path dan is_ai_generated.

Jalankan perintah ini untuk membuat file migrasi baru:

php artisan make:migration add_cover_image_to_articles_table --table=articles
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END

Buka file migrasi yang baru dibuat (di database/migrations/). Modifikasi method up() dan down():

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::table('articles', function (Blueprint $table) {
            $table->string('cover_image_path')->nullable()->after('content'); // atau setelah kolom lain
            $table->boolean('is_ai_generated')->default(false)->after('cover_image_path');
        });
    }

    public function down(): void
    {
        Schema::table('articles', function (Blueprint $table) {
            $table->dropColumn(['cover_image_path', 'is_ai_generated']);
        });
    }
};
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
PHP
IGNORE_WHEN_COPYING_END

Jalankan migrasi untuk menerapkan perubahan ke database:

php artisan migrate
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END
2.2. Update Model Article

Buka model app/Models/Article.php dan tambahkan kolom baru ke properti $fillable agar bisa diisi secara massal.

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Article extends Model
{
    use HasFactory;

    protected $fillable = [
        'title',
        'content',
        // tambahkan dua baris ini
        'cover_image_path',
        'is_ai_generated',
    ];
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
PHP
IGNORE_WHEN_COPYING_END
Langkah 3: Implementasi Frontend (Blade & JavaScript)

Ini adalah bagian di mana pengguna berinteraksi. Kita akan membuat form yang dinamis.

3.1. Membuat View (Blade)

Misalkan Anda memiliki view resources/views/articles/create.blade.php. Ubah menjadi seperti ini:

@extends('layouts.app') {{-- Sesuaikan dengan layout Anda --}}

@section('content')
<div class="container">
    <h1>Buat Berita Baru</h1>

    {{-- Form utama untuk menyimpan artikel --}}
    <form action="{{ route('articles.store') }}" method="POST" enctype="multipart/form-data" id="articleForm">
        @csrf

        {{-- Judul dan Konten Berita --}}
        <div class="mb-3">
            <label for="title" class="form-label">Judul Berita</label>
            <input type="text" class="form-control" id="title" name="title" required>
        </div>
        <div class="mb-3">
            <label for="content" class="form-label">Isi Berita</label>
            <textarea class="form-control" id="content" name="content" rows="10" required></textarea>
        </div>

        <hr>
        
        <h4>Gambar Sampul</h4>

        {{-- Preview Gambar --}}
        <div class="mb-3">
            <img id="imagePreview" src="https://via.placeholder.com/800x400.png?text=Preview+Gambar" alt="Preview Gambar" class="img-fluid" style="max-height: 400px; width: 100%; object-fit: cover;">
        </div>

        {{-- Pilihan antara AI dan Manual --}}
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <button class="nav-link active" id="nav-ai-tab" data-bs-toggle="tab" data-bs-target="#nav-ai" type="button" role="tab" aria-controls="nav-ai" aria-selected="true">Generate dengan AI</button>
                <button class="nav-link" id="nav-manual-tab" data-bs-toggle="tab" data-bs-target="#nav-manual" type="button" role="tab" aria-controls="nav-manual" aria-selected="false">Upload Manual</button>
            </div>
        </nav>
        <div class="tab-content p-3 border border-top-0" id="nav-tabContent">
            {{-- Panel Generate AI --}}
            <div class="tab-pane fade show active" id="nav-ai" role="tabpanel" aria-labelledby="nav-ai-tab">
                <div class="mb-3">
                    <label for="ai_prompt" class="form-label">Deskripsi Gambar (Prompt)</label>
                    <textarea class="form-control" id="ai_prompt" rows="3" placeholder="Contoh: seekor babi dengan sayap dan topi terbang di atas kota masa depan yang futuristik"></textarea>
                </div>
                <button type="button" class="btn btn-primary" id="generateButton">
                    <span id="spinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Generate Gambar
                </button>
                <small class="form-text text-muted d-block mt-2">Gambar yang dihasilkan akan berukuran standar.</small>
            </div>
            {{-- Panel Upload Manual --}}
            <div class="tab-pane fade" id="nav-manual" role="tabpanel" aria-labelledby="nav-manual-tab">
                <div class="mb-3">
                    <label for="manual_image" class="form-label">Pilih File Gambar</label>
                    <input class="form-control" type="file" id="manual_image" name="manual_image" accept="image/png, image/jpeg, image/webp">
                </div>
            </div>
        </div>

        {{-- Input tersembunyi untuk menyimpan data gambar yang akan disubmit --}}
        <input type="hidden" name="cover_image_path" id="cover_image_path">
        <input type="hidden" name="is_ai_generated" id="is_ai_generated" value="0">
        
        <hr>
        <button type="submit" class="btn btn-success mt-3">Simpan Berita</button>
    </form>
</div>

{{-- Tambahkan script di akhir body --}}
@endsection

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function () {
    const generateButton = document.getElementById('generateButton');
    const aiPrompt = document.getElementById('ai_prompt');
    const imagePreview = document.getElementById('imagePreview');
    const spinner = document.getElementById('spinner');

    // Hidden inputs
    const coverImagePathInput = document.getElementById('cover_image_path');
    const isAiGeneratedInput = document.getElementById('is_ai_generated');

    // Manual upload input
    const manualImageInput = document.getElementById('manual_image');

    generateButton.addEventListener('click', async function () {
        const prompt = aiPrompt.value;
        if (!prompt) {
            alert('Silakan masukkan deskripsi gambar (prompt).');
            return;
        }

        // Tampilkan loading state
        generateButton.disabled = true;
        spinner.classList.remove('d-none');
        imagePreview.style.opacity = '0.5';

        try {
            const response = await fetch('{{ route("image.generate") }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token() }}' // Penting untuk keamanan Laravel
                },
                body: JSON.stringify({ prompt: prompt })
            });

            const result = await response.json();

            if (result.success) {
                imagePreview.src = result.url;
                coverImagePathInput.value = result.path; // Simpan path untuk form submission
                isAiGeneratedInput.value = '1'; // Tandai sebagai AI
                manualImageInput.value = ''; // Kosongkan input file manual
                alert('Gambar berhasil dibuat!');
            } else {
                alert('Error: ' + result.error);
            }
        } catch (error) {
            console.error('Fetch error:', error);
            alert('Terjadi kesalahan koneksi. Silakan coba lagi.');
        } finally {
            // Hilangkan loading state
            generateButton.disabled = false;
            spinner.classList.add('d-none');
            imagePreview.style.opacity = '1';
        }
    });

    // Handle preview untuk upload manual
    manualImageInput.addEventListener('change', function(event){
        if (event.target.files && event.target.files[0]) {
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                // Saat upload manual, kita tidak set path, karena akan dihandle oleh backend
                // Tapi kita pastikan status AI-nya false
                isAiGeneratedInput.value = '0';
                coverImagePathInput.value = ''; // Kosongkan path AI jika ada
            }
            reader.readAsDataURL(event.target.files[0]);
        }
    });
});
</script>
@endpush
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Html
IGNORE_WHEN_COPYING_END

Catatan: Contoh di atas menggunakan Bootstrap 5 untuk styling (nav-tabs, button, dll.). Pastikan Anda sudah meng-include Bootstrap di layout Anda (layouts.app.blade.php).

Langkah 4: Menyatukan Semuanya
4.1. Mengupdate ArticleController

Sekarang, kita perlu mengupdate method store di ArticleController Anda untuk menangani penyimpanan gambar, baik dari AI maupun upload manual.

Buka app/Http/Controllers/ArticleController.php (atau controller yang Anda gunakan untuk menyimpan berita).

<?php

namespace App\Http\Controllers;

use App\Models\Article;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class ArticleController extends Controller
{
    // ... method index, create, etc.

    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'title' => 'required|string|max:255',
            'content' => 'required|string',
            'cover_image_path' => 'nullable|string', // Dari AI
            'is_ai_generated' => 'required|boolean',
            'manual_image' => 'nullable|image|mimes:jpeg,png,jpg,webp|max:2048', // Dari upload
        ]);
        
        $articleData = [
            'title' => $validatedData['title'],
            'content' => $validatedData['content'],
            'is_ai_generated' => $validatedData['is_ai_generated'],
        ];

        // Cek jika ada upload manual
        if ($request->hasFile('manual_image')) {
            // Simpan gambar dari upload manual
            $path = $request->file('manual_image')->store('covers', 'public');
            $articleData['cover_image_path'] = $path;
            $articleData['is_ai_generated'] = 0; // Pastikan false jika manual
        } 
        // Jika tidak ada upload manual, gunakan path dari AI (jika ada)
        elseif (!empty($validatedData['cover_image_path'])) {
            $articleData['cover_image_path'] = $validatedData['cover_image_path'];
        }

        Article::create($articleData);

        return redirect()->route('articles.index')->with('success', 'Berita berhasil dibuat!');
    }

    // ... method show, edit, update, destroy
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
PHP
IGNORE_WHEN_COPYING_END
4.2. Menampilkan Berita dan Keterangan AI

Terakhir, di halaman detail berita (misalnya resources/views/articles/show.blade.php), tampilkan gambar dan keterangan kondisional.

@extends('layouts.app')

@section('content')
<div class="container">
    <h1>{{ $article->title }}</h1>
    <p>Dipublikasikan pada: {{ $article->created_at->format('d M Y') }}</p>

    @if($article->cover_image_path)
        <div class="cover-image-container my-4">
            <img src="{{ asset('storage/' . $article->cover_image_path) }}" alt="{{ $article->title }}" class="img-fluid">
            
            {{-- INI BAGIAN PENTINGNYA --}}
            @if($article->is_ai_generated)
                <small class="d-block text-muted mt-2"><em>Gambar dibuat oleh AI</em></small>
            @endif
        </div>
    @endif

    <div class="article-content">
        {!! nl2br(e($article->content)) !!}
    </div>
</div>
@endsection
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Html
IGNORE_WHEN_COPYING_END
Langkah Terakhir: Verifikasi

Storage Link: Pastikan Anda sudah pernah menjalankan php artisan storage:link. Perintah ini membuat symlink dari public/storage ke storage/app/public sehingga file bisa diakses dari web. Jika belum, jalankan sekarang.

Clear Cache: Jalankan php artisan config:cache dan php artisan route:cache (di production) untuk memastikan semua konfigurasi baru terbaca.

Testing: Buka halaman pembuatan berita, coba generate gambar dengan prompt, lalu simpan. Kemudian coba buat artikel lain dengan upload manual. Periksa di halaman detail berita apakah gambar dan keterangannya muncul dengan benar.

Bonus: Menambahkan Watermark "Dibuat oleh AI"

Jika Anda ingin keterangan "Dibuat oleh AI" langsung menempel pada gambar (watermark), Anda bisa menggunakan library seperti Intervention Image.

Install:

composer require intervention/image
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END

Update GeminiImageService:
Ubah method generateImageFromPrompt menjadi seperti ini:

// Jangan lupa tambahkan `use` di atas
use Intervention\Image\ImageManager;
use Intervention\Image\Drivers\Gd\Driver;

// ...
public function generateImageFromPrompt(string $prompt): ?string
{
    try {
        // ... (kode untuk memanggil Gemini sama)
        $base64Data = $response->images()[0]->data;
        $imageData = base64_decode($base64Data);
        
        // Buat instance Intervention Image
        $manager = new ImageManager(new Driver());
        $image = $manager->read($imageData);

        // Tambahkan teks watermark
        $image->text('Gambar dibuat oleh AI', $image->width() - 20, $image->height() - 20, function ($font) {
            $font->file(public_path('fonts/your-font.ttf')); // Siapkan file font Anda di public/fonts
            $font->size(24);
            $font->color('#ffffff');
            $font->align('right');
            $font->valign('bottom');
            $font->stroke('#000000', 1);
        });

        $filename = 'covers/' . Str::uuid() . '.png';

        // Simpan gambar yang sudah di-watermark
        Storage::disk('public')->put($filename, (string) $image->encode());

        return $filename;

    } catch (\Exception $e) {
        Log::error('Gemini API or Watermark Error: ' . $e->getMessage());
        return null;
    }
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
PHP
IGNORE_WHEN_COPYING_END

Dengan pendekatan ini, Anda tidak perlu lagi menyimpan kolom is_ai_generated di database karena informasinya sudah ada di dalam gambar itu sendiri. Anda bisa menyederhanakan kode di Controller dan View.